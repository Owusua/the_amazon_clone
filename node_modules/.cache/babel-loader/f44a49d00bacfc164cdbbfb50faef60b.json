{"ast":null,"code":"//this is the store which is represent by a basket, which is an empty array\nexport const initialState = {\n  basket: [],\n  user: null\n};\n\nconst reducer = (state, action) => {\n  console.log(action); //for debugging the basket\n\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      //logic for adding item to basket\n      return { //return the current state but changing the basket and and returning whatever is in the basket was plus whatever item you just added\n        ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      //logic for Removing item from basket...\n      let newBasket = [...state.bassket];\n      const index = state.basket.findIndex(basketItem => basketItem.id === action.id);\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/owusua/Music/amazon_clone/briod_amazonclone/src/reducer.js"],"names":["initialState","basket","user","reducer","state","action","console","log","type","item","newBasket","bassket","index","findIndex","basketItem","id"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAE,EADkB;AAE1BC,EAAAA,IAAI,EAAE;AAFoB,CAArB;;AAKP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EADiC,CACZ;;AACrB,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,eAAL;AACE;AACA,aAAO,EACL;AACA,WAAGJ,KAFE;AAGLH,QAAAA,MAAM,EAAE,CAAC,GAAGG,KAAK,CAACH,MAAV,EAAkBI,MAAM,CAACI,IAAzB;AAHH,OAAP;;AAMF,SAAK,oBAAL;AACE;AACA,UAAIC,SAAS,GAAG,CAAC,GAAGN,KAAK,CAACO,OAAV,CAAhB;AACA,YAAMC,KAAK,GAAGR,KAAK,CAACH,MAAN,CAAaY,SAAb,CACXC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBV,MAAM,CAACU,EAD7B,CAAd;AAIA,aAAO,EAAE,GAAGX;AAAL,OAAP;;AAEF;AACE,aAAOA,KAAP;AAnBJ;AAqBD,CAvBD;;AAyBA,eAAeD,OAAf","sourcesContent":["//this is the store which is represent by a basket, which is an empty array\nexport const initialState = {\n  basket: [],\n  user: null,\n};\n\nconst reducer = (state, action) => {\n  console.log(action); //for debugging the basket\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      //logic for adding item to basket\n      return {\n        //return the current state but changing the basket and and returning whatever is in the basket was plus whatever item you just added\n        ...state,\n        basket: [...state.basket, action.item],\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      //logic for Removing item from basket...\n      let newBasket = [...state.bassket];\n      const index = state.basket.findIndex(\n        (basketItem) => basketItem.id === action.id\n      );\n\n      return { ...state };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}